#!/usr/bin/env python
"""render each layer of an Inkscape .svg file to a separate .png image"""
import argparse
from lxml import etree # Ubuntu Karmic package: python-lxml
import tempfile
import os, re, copy, sys, stat
import Image # XXX TODO: convert to reading XML file instead of using PIL
from burst_s5.inkscape_config import INKSCAPE, tag_name, attrib_key, label_key
from burst_s5.util import get_stdout

def get_width_height(fname):
    # no cache, query inkscape for information
    tmpf = tempfile.NamedTemporaryFile(suffix='.png')
    tmpf.close()
    cmd = [INKSCAPE,'-C',fname,'-e',tmpf.name]
    get_stdout(cmd)
    im = Image.open(tmpf.name)
    (width, height) = im.size
    os.unlink(tmpf.name)

    return width, height

def svg_render_layers(source_fname,mode='replace'):
    assert mode in ('replace','overlay')
    width, height = get_width_height( source_fname )
    root = etree.parse(source_fname).getroot()
    layer_ids = []
    for child in root:
        if child.tag == tag_name:
            if child.attrib.get(attrib_key,None) == 'layer':
                label = child.attrib[label_key]
                layer_ids.append( child.attrib['id'] )

    out_dir = os.path.split( source_fname )[0]

    out_base_fname = os.path.split(source_fname)[-1]
    out_base_fname = os.path.splitext(out_base_fname)[0]
    out_base_fname = os.path.join( out_dir, out_base_fname )

    svg_base_path, svg_base_fname = os.path.split(source_fname)

    delete_files=[]
    try:
        for i,layer_id in enumerate(layer_ids):
            out_fname = '%s_%02d.png'%(out_base_fname,i+1)

            if mode == 'overlay':
                cmd_extra = ['-i',layer_id]
            elif mode == 'replace':
                out_svg_fname = svg_base_fname + '-' + layer_id + '.svg'
                if 1: # make indentation level match inklayers_directive.py
                    newroot = copy.deepcopy(root)

                    # remove undisplayed layers
                    elems = newroot.findall(tag_name)
                    for remove_layer_id in layer_ids[i+1:]:
                        removed = False
                        for child in elems:
                            if (child.attrib.get(attrib_key,None) == 'layer' and
                                child.attrib['id'] == remove_layer_id):
                                newroot.remove( child )
                                removed = True
                                break
                        if not removed:
                            raise ValueError('could not remove layer_id "%s"'%remove_layer_id)

                    # turn on all layers (sometimes files are saved with layers turned off)
                    elems = newroot.findall(tag_name)
                    for child in elems:
                        if 'style' in child.attrib:
                            del child.attrib['style']

                    if os.path.exists( out_svg_fname ):
                        raise RuntimeError('temporary output file "%s" exists. Aborting' % 
                                           out_svg_fname)
                    etree.ElementTree(newroot).write( out_svg_fname )
                    delete_files.append( out_svg_fname )

                source_fname = out_svg_fname
                cmd_extra = [
                    '-b','white',  # white background
                    '-y','0xFF',   # fully opaque
                    ]

            cmd = [INKSCAPE,
                   '-j',          # only export this layer
                   '-C',          # export canvas (page)
                   #'-d', dpi,
                   source_fname,
                   '-e',out_fname,
                   ] + cmd_extra
            get_stdout(cmd)
    finally:
        for fname in delete_files:
            os.unlink(fname)

def main():
    parser = argparse.ArgumentParser(description='convert an Inkscape .svg file into .png images')
    parser.add_argument('filename', type=str, help='the svg file to convert')
    parser.add_argument('--mode', type=str, default='replace', 
                        help="'replace' or 'overlay'. Specifies whether each successive .png "
                        "file is opaque and contains the previous layer (replace mode) or if the "
                        "file is transparent and contains only the present layer (overlay mode)")
                        
    args = parser.parse_args()
    svg_render_layers(args.filename,mode=args.mode)

if __name__=='__main__':
    main()
